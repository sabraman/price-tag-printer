import { createConversation } from "@grammyjs/conversations";
import { bold, fmt } from "@grammyjs/parse-mode";
import type { MyContext } from "../bot";
import { bot, generateUniqueId } from "../bot";
import {
	createConfirmationKeyboard,
	createEditModeKeyboard,
	createItemSelectionKeyboard,
	createItemsMenuKeyboard,
	createMainMenuKeyboard,
	createNumberInputKeyboard,
} from "../keyboards";

// Items list handler
bot.callbackQuery("items_list", async (ctx) => {
	await ctx.answerCallbackQuery();

	const items = ctx.session.items;

	if (items.length === 0) {
		await ctx.editMessageText("üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç", {
			reply_markup: createItemsMenuKeyboard(0),
		});
		return;
	}

	// Create items list message
	let itemsList = fmt`${bold}üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤${bold}\n\n`;

	items.slice(0, 10).forEach((item: any, index: number) => {
		const price =
			item.discountPrice !== item.price
				? `${item.price}‚ÇΩ ‚Üí ${item.discountPrice}‚ÇΩ`
				: `${item.price}‚ÇΩ`;

		itemsList = fmt`${itemsList}${index + 1}. ${item.data} - ${price}\n`;
	});

	if (items.length > 10) {
		itemsList = fmt`${itemsList}\n... –∏ –µ—â–µ ${items.length - 10} —Ç–æ–≤–∞—Ä–æ–≤`;
	}

	await ctx.editMessageText(itemsList.toString(), {
		reply_markup: createItemsMenuKeyboard(items.length),
		parse_mode: "MarkdownV2",
	});
});

// Edit mode handler
bot.callbackQuery("items_edit_mode", async (ctx) => {
	await ctx.answerCallbackQuery();

	ctx.session.mode = "edit_items";

	const editMessage = fmt`
${bold}‚úèÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è${bold}

–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
‚Ä¢ –£–¥–∞–ª—è—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã

${
	ctx.session.items.length > 0
		? "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:"
		: "–ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:"
}
	`;

	await ctx.editMessageText(editMessage.toString(), {
		reply_markup: createEditModeKeyboard(
			ctx.session.items,
			ctx.session.editingItemId,
		),
		parse_mode: "MarkdownV2",
	});
});

// Add item handler - starts conversation
async function addItemConversation(conversation: any, ctx: MyContext) {
	await ctx.reply("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:");

	const nameCtx = await conversation.wait();
	const itemName = nameCtx.message?.text;

	if (!itemName) {
		await ctx.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", {
			reply_markup: createEditModeKeyboard(
				ctx.session.items,
				ctx.session.editingItemId,
			),
		});
		return;
	}

	await ctx.reply("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):");

	const priceCtx = await conversation.wait();
	const priceText = priceCtx.message?.text;
	const price = Number(priceText);

	if (!priceText || Number.isNaN(price) || price <= 0) {
		await ctx.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", {
			reply_markup: createEditModeKeyboard(
				ctx.session.items,
				ctx.session.editingItemId,
			),
		});
		return;
	}

	// Create new item
	const newItem = {
		id: generateUniqueId(),
		data: itemName,
		price: price,
		discountPrice: price, // Will be recalculated
	};

	// Add to session
	ctx.session.items.push(newItem);

	// Recalculate discount prices
	updateItemDiscountPrices(ctx);

	await ctx.reply(
		fmt`‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω: ${bold}${itemName}${bold} - ${price}‚ÇΩ`.toString(),
		{
			reply_markup: createEditModeKeyboard(ctx.session.items, newItem.id),
			parse_mode: "MarkdownV2",
		},
	);
}

bot.use(createConversation(addItemConversation));

bot.callbackQuery("edit_add_item", (ctx) =>
	ctx.conversation.enter("addItemConversation"),
);
bot.callbackQuery("items_add_first", (ctx) =>
	ctx.conversation.enter("addItemConversation"),
);

// Select item for editing
bot.callbackQuery("edit_select_item", async (ctx) => {
	await ctx.answerCallbackQuery();

	await ctx.editMessageText(
		fmt`${bold}üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${bold}`.toString(),
		{
			reply_markup: createItemSelectionKeyboard(ctx.session.items),
			parse_mode: "MarkdownV2",
		},
	);
});

// Handle item selection
bot.callbackQuery(/select_item_(\d+)/, async (ctx) => {
	await ctx.answerCallbackQuery();

	const itemId = Number(ctx.match?.[1]);
	const item = ctx.session.items.find((i) => i.id === itemId);

	if (!item) {
		await ctx.editMessageText("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", {
			reply_markup: createEditModeKeyboard(ctx.session.items),
		});
		return;
	}

	ctx.session.editingItemId = itemId;

	await ctx.editMessageText(
		fmt`
${bold}‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞${bold}

${bold}–ù–∞–∑–≤–∞–Ω–∏–µ:${bold} ${item.data}
${bold}–¶–µ–Ω–∞:${bold} ${item.price}‚ÇΩ
${
	item.discountPrice !== item.price
		? fmt`${bold}–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π:${bold} ${item.discountPrice}‚ÇΩ`
		: ""
}
${item.priceFor2 ? fmt`${bold}–¶–µ–Ω–∞ –∑–∞ 2 —à—Ç:${bold} ${item.priceFor2}‚ÇΩ` : ""}
${item.priceFrom3 ? fmt`${bold}–¶–µ–Ω–∞ –æ—Ç 3 —à—Ç:${bold} ${item.priceFrom3}‚ÇΩ` : ""}

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:
		`.toString(),
		{
			reply_markup: createEditModeKeyboard(ctx.session.items, itemId),
			parse_mode: "MarkdownV2",
		},
	);
});

// Edit item price
bot.callbackQuery(/edit_item_price_(\d+)/, async (ctx) => {
	await ctx.answerCallbackQuery();

	const itemId = Number(ctx.match?.[1]);
	const item = ctx.session.items.find((i) => i.id === itemId);

	if (!item) {
		return;
	}

	await ctx.editMessageText(
		fmt`${bold}üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã${bold} –¥–ª—è ${item.data}\n\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${item.price}‚ÇΩ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:`.toString(),
		{
			reply_markup: createNumberInputKeyboard("price", item.price),
			parse_mode: "MarkdownV2",
		},
	);
});

// Handle price selection
bot.callbackQuery(/set_price_(\d+)/, async (ctx) => {
	await ctx.answerCallbackQuery();

	const newPrice = Number(ctx.match?.[1]);
	const itemId = ctx.session.editingItemId;

	if (!itemId) return;

	const item = ctx.session.items.find((i) => i.id === itemId);
	if (!item) return;

	item.price = newPrice;
	updateItemDiscountPrices(ctx);

	await ctx.editMessageText(fmt`‚úÖ –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newPrice}‚ÇΩ`.toString(), {
		reply_markup: createEditModeKeyboard(ctx.session.items, itemId),
		parse_mode: "MarkdownV2",
	});
});

// Clear all items
bot.callbackQuery("items_clear", async (ctx) => {
	await ctx.answerCallbackQuery();

	await ctx.editMessageText(
		"üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
		{
			reply_markup: createConfirmationKeyboard("clear_all"),
		},
	);
});

bot.callbackQuery("confirm_clear_all", async (ctx) => {
	await ctx.answerCallbackQuery();

	ctx.session.items = [];
	ctx.session.editingItemId = undefined;

	await ctx.editMessageText("‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã", {
		reply_markup: createMainMenuKeyboard(),
	});
});

bot.callbackQuery("cancel_action", async (ctx) => {
	await ctx.answerCallbackQuery();

	await ctx.editMessageText("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
		reply_markup: createItemsMenuKeyboard(ctx.session.items.length),
	});
});

// Helper function to update discount prices
function updateItemDiscountPrices(ctx: MyContext) {
	const { design, discountAmount, maxDiscountPercent } = ctx.session;

	if (!design) return;

	ctx.session.items.forEach((item) => {
		const discountedPrice = item.price - discountAmount;
		const discountPercent = ((item.price - discountedPrice) / item.price) * 100;

		if (discountPercent > maxDiscountPercent) {
			item.discountPrice = Math.round(
				item.price - (item.price * maxDiscountPercent) / 100,
			);
		} else {
			item.discountPrice = Math.round(discountedPrice);
		}

		// Ensure discount price is not negative
		if (item.discountPrice < 0) {
			item.discountPrice = item.price;
		}
	});
}
