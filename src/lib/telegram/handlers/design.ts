import { bold, fmt } from "@grammyjs/parse-mode";
import { InlineKeyboard } from "grammy";
import { bot } from "../bot";
import {
	createDesignMenuKeyboard,
	createDiscountSettingsKeyboard,
	createFontSelectionKeyboard,
	createNumberInputKeyboard,
	createThemeCategoryKeyboard,
	createThemeSelectionKeyboard,
} from "../keyboards";
import { escapeMarkdown } from "../utils/markdown";

// Theme selection handler
bot.callbackQuery("design_themes", async (ctx) => {
	await ctx.answerCallbackQuery();

	const themesMessage = fmt`
${bold}üé® –í—ã–±–æ—Ä —Ç–µ–º—ã${bold}

–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: ${ctx.session.designType}

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–º:
	`;

	await ctx.editMessageText(escapeMarkdown(themesMessage.toString()), {
		reply_markup: createThemeSelectionKeyboard(ctx.session.designType, ""),
		parse_mode: "MarkdownV2",
	});
});

// Theme category handlers
bot.callbackQuery("theme_category_dark", async (ctx) => {
	await ctx.answerCallbackQuery();

	const categoryMessage = fmt`
${bold}üåô –¢–µ–º–Ω—ã–µ —Ç–µ–º—ã${bold}

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:
	`;

	await ctx.editMessageText(escapeMarkdown(categoryMessage.toString()), {
		reply_markup: createThemeCategoryKeyboard("dark", ctx.session.designType),
		parse_mode: "MarkdownV2",
	});
});

bot.callbackQuery("theme_category_light", async (ctx) => {
	await ctx.answerCallbackQuery();

	const categoryMessage = fmt`
${bold}‚òÄÔ∏è –°–≤–µ—Ç–ª—ã–µ —Ç–µ–º—ã${bold}

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:
	`;

	await ctx.editMessageText(escapeMarkdown(categoryMessage.toString()), {
		reply_markup: createThemeCategoryKeyboard("light", ctx.session.designType),
		parse_mode: "MarkdownV2",
	});
});

bot.callbackQuery("theme_category_light_mono", async (ctx) => {
	await ctx.answerCallbackQuery();

	const categoryMessage = fmt`
${bold}‚ö™ –°–≤–µ—Ç–ª—ã–µ –º–æ–Ω–æ—Ö—Ä–æ–º${bold}

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:
	`;

	await ctx.editMessageText(escapeMarkdown(categoryMessage.toString()), {
		reply_markup: createThemeCategoryKeyboard(
			"light_mono",
			ctx.session.designType,
		),
		parse_mode: "MarkdownV2",
	});
});

bot.callbackQuery("theme_category_dark_mono", async (ctx) => {
	await ctx.answerCallbackQuery();

	const categoryMessage = fmt`
${bold}‚ö´ –¢–µ–º–Ω—ã–µ –º–æ–Ω–æ—Ö—Ä–æ–º${bold}

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:
	`;

	await ctx.editMessageText(escapeMarkdown(categoryMessage.toString()), {
		reply_markup: createThemeCategoryKeyboard(
			"dark_mono",
			ctx.session.designType,
		),
		parse_mode: "MarkdownV2",
	});
});

// Theme selection handler
bot.callbackQuery(/theme_select_(.+)/, async (ctx) => {
	await ctx.answerCallbackQuery();

	const themeKey = ctx.match?.[1];
	if (!themeKey) return;

	ctx.session.designType = themeKey;

	await ctx.editMessageText(
		fmt`‚úÖ ${bold}–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!${bold}\n\n–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞: ${themeKey}`.toString(),
		{
			reply_markup: createDesignMenuKeyboard(),
			parse_mode: "MarkdownV2",
		},
	);
});

// Discount settings handler
bot.callbackQuery("design_discounts", async (ctx) => {
	await ctx.answerCallbackQuery();

	const discountMessage = fmt`
${bold}üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∏–¥–æ–∫${bold}

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –°—Ç–∞—Ç—É—Å: ${ctx.session.design ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–≤—ã–∫–ª—é—á–µ–Ω—ã"}
‚Ä¢ –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: ${ctx.session.discountAmount}‚ÇΩ
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: ${ctx.session.maxDiscountPercent}%

–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∫–∏–¥–∫–∏ –¥–ª—è –≤–∞—à–∏—Ö —Ü–µ–Ω–Ω–∏–∫–æ–≤:
	`;

	await ctx.editMessageText(escapeMarkdown(discountMessage.toString()), {
		reply_markup: createDiscountSettingsKeyboard(
			ctx.session.design,
			ctx.session.discountAmount,
			ctx.session.maxDiscountPercent,
		),
		parse_mode: "MarkdownV2",
	});
});

// Toggle discount handler
bot.callbackQuery("toggle_discount", async (ctx) => {
	await ctx.answerCallbackQuery();

	ctx.session.design = !ctx.session.design;

	const status = ctx.session.design ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–≤—ã–∫–ª—é—á–µ–Ω—ã";

	await ctx.editMessageText(
		fmt`‚úÖ ${bold}–°–∫–∏–¥–∫–∏ ${status}!${bold}`.toString(),
		{
			reply_markup: createDiscountSettingsKeyboard(
				ctx.session.design,
				ctx.session.discountAmount,
				ctx.session.maxDiscountPercent,
			),
			parse_mode: "MarkdownV2",
		},
	);
});

// Set discount amount handler
bot.callbackQuery("set_discount_amount", async (ctx) => {
	await ctx.answerCallbackQuery();

	const amountMessage = fmt`
${bold}üí∞ –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏${bold}

–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: ${ctx.session.discountAmount}‚ÇΩ

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏:
	`;

	await ctx.editMessageText(escapeMarkdown(amountMessage.toString()), {
		reply_markup: createNumberInputKeyboard(
			"discount",
			ctx.session.discountAmount,
		),
		parse_mode: "MarkdownV2",
	});
});

// Set max percent handler
bot.callbackQuery("set_max_percent", async (ctx) => {
	await ctx.answerCallbackQuery();

	const percentMessage = fmt`
${bold}üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏${bold}

–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: ${ctx.session.maxDiscountPercent}%

–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:
	`;

	await ctx.editMessageText(escapeMarkdown(percentMessage.toString()), {
		reply_markup: createNumberInputKeyboard(
			"percent",
			ctx.session.maxDiscountPercent,
		),
		parse_mode: "MarkdownV2",
	});
});

// Handle discount amount selection
bot.callbackQuery(/set_discount_(\d+)/, async (ctx) => {
	await ctx.answerCallbackQuery();

	const amount = Number(ctx.match?.[1]);
	if (amount) {
		ctx.session.discountAmount = amount;

		await ctx.editMessageText(
			fmt`‚úÖ ${bold}–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –∏–∑–º–µ–Ω–µ–Ω!${bold}\n\n–ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: ${amount}‚ÇΩ`.toString(),
			{
				reply_markup: createDiscountSettingsKeyboard(
					ctx.session.design,
					ctx.session.discountAmount,
					ctx.session.maxDiscountPercent,
				),
				parse_mode: "MarkdownV2",
			},
		);
	}
});

// Handle percent selection
bot.callbackQuery(/set_percent_(\d+)/, async (ctx) => {
	await ctx.answerCallbackQuery();

	const percent = Number(ctx.match?.[1]);
	if (percent) {
		ctx.session.maxDiscountPercent = percent;

		await ctx.editMessageText(
			fmt`‚úÖ ${bold}–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω!${bold}\n\n–ù–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: ${percent}%`.toString(),
			{
				reply_markup: createDiscountSettingsKeyboard(
					ctx.session.design,
					ctx.session.discountAmount,
					ctx.session.maxDiscountPercent,
				),
				parse_mode: "MarkdownV2",
			},
		);
	}
});

// Font selection handler
bot.callbackQuery("design_font", async (ctx) => {
	await ctx.answerCallbackQuery();

	const fontMessage = fmt`
${bold}üî§ –í—ã–±–æ—Ä —à—Ä–∏—Ñ—Ç–∞${bold}

–¢–µ–∫—É—â–∏–π —à—Ä–∏—Ñ—Ç: ${ctx.session.currentFont}

–í—ã–±–µ—Ä–∏—Ç–µ —à—Ä–∏—Ñ—Ç –¥–ª—è —Ü–µ–Ω–Ω–∏–∫–æ–≤:
	`;

	await ctx.editMessageText(escapeMarkdown(fontMessage.toString()), {
		reply_markup: createFontSelectionKeyboard(ctx.session.currentFont),
		parse_mode: "MarkdownV2",
	});
});

// Font selection handler
bot.callbackQuery(/font_select_(.+)/, async (ctx) => {
	await ctx.answerCallbackQuery();

	const fontKey = ctx.match?.[1];
	if (!fontKey) return;

	ctx.session.currentFont = fontKey;

	await ctx.editMessageText(
		fmt`‚úÖ ${bold}–®—Ä–∏—Ñ—Ç –∏–∑–º–µ–Ω–µ–Ω!${bold}\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç: ${fontKey}`.toString(),
		{
			reply_markup: createDesignMenuKeyboard(),
			parse_mode: "MarkdownV2",
		},
	);
});

// Labels toggle handler
bot.callbackQuery("design_labels", async (ctx) => {
	await ctx.answerCallbackQuery();

	ctx.session.showThemeLabels = !ctx.session.showThemeLabels;

	const status = ctx.session.showThemeLabels ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–≤—ã–∫–ª—é—á–µ–Ω—ã";

	await ctx.editMessageText(
		fmt`‚úÖ ${bold}–ú–µ—Ç–∫–∏ ${status}!${bold}\n\n–ü–æ–∫–∞–∑ –º–µ—Ç–æ–∫ NEW/SALE –Ω–∞ —Ü–µ–Ω–Ω–∏–∫–∞—Ö: ${status}`.toString(),
		{
			reply_markup: createDesignMenuKeyboard(),
			parse_mode: "MarkdownV2",
		},
	);
});

// Cutting lines handler
bot.callbackQuery("design_cutting_lines", async (ctx) => {
	await ctx.answerCallbackQuery();

	const linesMessage = fmt`
${bold}üìè –õ–∏–Ω–∏–∏ –æ—Ç—Ä–µ–∑–∞${bold}

–¢–µ–∫—É—â–∏–π —Ü–≤–µ—Ç: ${ctx.session.cuttingLineColor}

–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–≤–µ—Ç –ª–∏–Ω–∏–π –æ—Ç—Ä–µ–∑–∞ –Ω–∞ —Ü–µ–Ω–Ω–∏–∫–∞—Ö\\.

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±\\-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\\.
	`;

	await ctx.editMessageText(escapeMarkdown(linesMessage.toString()), {
		reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥", "menu_design"),
		parse_mode: "MarkdownV2",
	});
});

// Discount text handler
bot.callbackQuery("set_discount_text", async (ctx) => {
	await ctx.answerCallbackQuery();

	const textMessage = fmt`
${bold}üìù –¢–µ–∫—Å—Ç —Å–∫–∏–¥–∫–∏${bold}

–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:
${ctx.session.discountText}

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–∫–∏–¥–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±\\-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\\.
	`;

	await ctx.editMessageText(escapeMarkdown(textMessage.toString()), {
		reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥", "design_discounts"),
		parse_mode: "MarkdownV2",
	});
});
