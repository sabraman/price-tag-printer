// Complete working bot with all functionality

import { conversations, createConversation } from "@grammyjs/conversations";
import { config } from "dotenv";
import { Bot, InlineKeyboard, session } from "grammy";

// Load .env.local file
config({ path: ".env.local" });

const bot = new Bot(process.env.TELEGRAM_BOT_TOKEN);

// Session setup
bot.use(
	session({
		initial: () => ({
			mode: "main",
			items: [],
			design: false,
			designType: "default",
			discountAmount: 500,
			maxDiscountPercent: 5,
			themes: {
				default: { start: "#222222", end: "#dd4c9b", textColor: "#ffffff" },
				new: { start: "#222222", end: "#9cdd4c", textColor: "#ffffff" },
				sale: { start: "#222222", end: "#dd4c54", textColor: "#ffffff" },
			},
			currentFont: "montserrat",
			discountText: "—Ü–µ–Ω–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ\n–Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª",
			showThemeLabels: true,
			cuttingLineColor: "#cccccc",
		}),
	}),
);

// Add conversations
bot.use(conversations());

// Helper function for main menu keyboard
function createMainMenuKeyboard() {
	return new InlineKeyboard()
		.text("üì¶ –¢–æ–≤–∞—Ä—ã", "menu_items")
		.text("üé® –î–∏–∑–∞–π–Ω", "menu_design")
		.row()
		.text("üìÑ –°–æ–∑–¥–∞—Ç—å PDF", "generate_pdf")
		.text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "menu_settings");
}

function createItemsMenuKeyboard(itemsCount) {
	const keyboard = new InlineKeyboard();

	if (itemsCount > 0) {
		keyboard
			.text(`üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (${itemsCount})`, "items_list")
			.text("‚úèÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "items_edit_mode")
			.row()
			.text("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", "items_clear");
	} else {
		keyboard.text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä", "items_add_first");
	}

	keyboard
		.row()
		.text("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel", "items_upload")
		.text("üîô –ù–∞–∑–∞–¥", "back_to_main");

	return keyboard;
}

function createDesignMenuKeyboard() {
	return new InlineKeyboard()
		.text("üé® –¢–µ–º—ã", "design_themes")
		.text("üí∞ –°–∫–∏–¥–∫–∏", "design_discounts")
		.row()
		.text("üî§ –®—Ä–∏—Ñ—Ç", "design_font")
		.text("üè∑Ô∏è –ú–µ—Ç–∫–∏", "design_labels")
		.row()
		.text("üìè –õ–∏–Ω–∏–∏ –æ—Ç—Ä–µ–∑–∞", "design_cutting_lines")
		.text("üîô –ù–∞–∑–∞–¥", "back_to_main");
}

// Generate unique ID
let uniqueIdCounter = 0;
let lastTimestamp = 0;

function generateUniqueId() {
	let timestamp = Date.now();
	if (timestamp <= lastTimestamp) {
		timestamp = lastTimestamp + 1;
	}
	lastTimestamp = timestamp;
	const uniqueId = timestamp * 1000 + ++uniqueIdCounter;
	if (uniqueIdCounter > 999) {
		uniqueIdCounter = 0;
	}
	return uniqueId;
}

// Start command
bot.command("start", async (ctx) => {
	const welcomeMessage = `üè∑Ô∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ü–µ–Ω–Ω–∏–∫–æ–≤!</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ —Ü–µ–Ω–Ω–∏–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤.

<i>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</i>
‚Ä¢ üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
‚Ä¢ üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∑–∞–π–Ω–∞ –∏ —Ç–µ–º
‚Ä¢ üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –¥–ª—è –ø–µ—á–∞—Ç–∏
‚Ä¢ üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–æ–≤
‚Ä¢ üí∞ –°–∏—Å—Ç–µ–º–∞ —Å–∫–∏–¥–æ–∫

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

	await ctx.reply(welcomeMessage, {
		reply_markup: createMainMenuKeyboard(),
		parse_mode: "HTML",
	});
});

// Back to main menu
bot.callbackQuery("back_to_main", async (ctx) => {
	await ctx.answerCallbackQuery();
	ctx.session.mode = "main";

	const mainMessage = `üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

	await ctx.editMessageText(mainMessage, {
		reply_markup: createMainMenuKeyboard(),
		parse_mode: "HTML",
	});
});

// Items menu
bot.callbackQuery("menu_items", async (ctx) => {
	await ctx.answerCallbackQuery();
	ctx.session.mode = "edit_items";
	const itemsCount = ctx.session.items.length;

	const itemsMessage = `üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>

${itemsCount > 0 ? `–¢–æ–≤–∞—Ä–æ–≤ –≤ —Å–ø–∏—Å–∫–µ: ${itemsCount}` : "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç"}

${
	itemsCount > 0
		? "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫, –≤–æ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã."
		: "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏."
}`;

	await ctx.editMessageText(itemsMessage, {
		reply_markup: createItemsMenuKeyboard(itemsCount),
		parse_mode: "HTML",
	});
});

// Design menu
bot.callbackQuery("menu_design", async (ctx) => {
	await ctx.answerCallbackQuery();
	ctx.session.mode = "edit_themes";

	const designMessage = `üé® <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∑–∞–π–Ω–∞</b>

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –¢–µ–º–∞: ${ctx.session.designType}
‚Ä¢ –°–∫–∏–¥–∫–∏: ${ctx.session.design ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–≤—ã–∫–ª—é—á–µ–Ω—ã"}
‚Ä¢ –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: ${ctx.session.discountAmount}‚ÇΩ
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: ${ctx.session.maxDiscountPercent}%
‚Ä¢ –®—Ä–∏—Ñ—Ç: ${ctx.session.currentFont}

–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –≤–∞—à–∏—Ö —Ü–µ–Ω–Ω–∏–∫–æ–≤:`;

	await ctx.editMessageText(designMessage, {
		reply_markup: createDesignMenuKeyboard(),
		parse_mode: "HTML",
	});
});

// Add item conversation
async function addItemConversation(conversation, ctx) {
	await ctx.reply("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:");

	const nameCtx = await conversation.wait();
	const itemName = nameCtx.message?.text;

	if (!itemName) {
		await ctx.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", {
			reply_markup: createItemsMenuKeyboard(ctx.session.items.length),
		});
		return;
	}

	await ctx.reply("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):");

	const priceCtx = await conversation.wait();
	const priceText = priceCtx.message?.text;
	const price = Number(priceText);

	if (!priceText || isNaN(price) || price <= 0) {
		await ctx.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", {
			reply_markup: createItemsMenuKeyboard(ctx.session.items.length),
		});
		return;
	}

	// Create new item
	const newItem = {
		id: generateUniqueId(),
		data: itemName,
		price: price,
		discountPrice: price,
	};

	// Add to session
	ctx.session.items.push(newItem);

	await ctx.reply(`‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω: <b>${itemName}</b> - ${price}‚ÇΩ`, {
		reply_markup: createItemsMenuKeyboard(ctx.session.items.length),
		parse_mode: "HTML",
	});
}

bot.use(createConversation(addItemConversation));

bot.callbackQuery("items_add_first", (ctx) =>
	ctx.conversation.enter("addItemConversation"),
);

// Items list
bot.callbackQuery("items_list", async (ctx) => {
	await ctx.answerCallbackQuery();

	const items = ctx.session.items;

	if (items.length === 0) {
		await ctx.editMessageText("üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç", {
			reply_markup: createItemsMenuKeyboard(0),
		});
		return;
	}

	let itemsList = `üìã <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n`;

	items.slice(0, 10).forEach((item, index) => {
		const price =
			item.discountPrice !== item.price
				? `${item.price}‚ÇΩ ‚Üí ${item.discountPrice}‚ÇΩ`
				: `${item.price}‚ÇΩ`;

		itemsList += `${index + 1}. ${item.data} - ${price}\n`;
	});

	if (items.length > 10) {
		itemsList += `\n... –∏ –µ—â–µ ${items.length - 10} —Ç–æ–≤–∞—Ä–æ–≤`;
	}

	await ctx.editMessageText(itemsList, {
		reply_markup: createItemsMenuKeyboard(items.length),
		parse_mode: "HTML",
	});
});

// PDF generation placeholder
bot.callbackQuery("generate_pdf", async (ctx) => {
	await ctx.answerCallbackQuery();

	if (ctx.session.items.length === 0) {
		await ctx.editMessageText(
			'‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å PDF: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.\n\n–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é "üì¶ –¢–æ–≤–∞—Ä—ã".',
			{
				reply_markup: createMainMenuKeyboard(),
			},
		);
		return;
	}

	await ctx.editMessageText(
		"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF —Ñ–∞–π–ª...\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
	);

	// Simulate PDF generation
	setTimeout(async () => {
		await ctx.editMessageText(
			`‚úÖ <b>PDF —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç ${ctx.session.items.length} —Ü–µ–Ω–Ω–∏–∫–æ–≤.\n\nüí° –í —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö —Ñ–∞–π–ª –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`,
			{
				reply_markup: createMainMenuKeyboard(),
				parse_mode: "HTML",
			},
		);
	}, 2000);
});

// Catch unhandled callbacks
bot.on("callback_query", async (ctx) => {
	await ctx.answerCallbackQuery("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß");
});

console.log("ü§ñ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...");

bot
	.start({
		onStart: (botInfo) => {
			console.log(`‚úÖ –ë–æ—Ç @${botInfo.username} –∑–∞–ø—É—â–µ–Ω!`);
			console.log("üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏");
			console.log("\nüéØ –î–æ—Å—Ç—É–ø–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:");
			console.log("- ‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è");
			console.log("- ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ)");
			console.log("- ‚úÖ –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤");
			console.log("- ‚úÖ –ò–º–∏—Ç–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF");
			console.log("- üöß –î–∏–∑–∞–π–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∑–∞–≥–ª—É—à–∫–∏)");
		},
	})
	.catch((error) => {
		console.error("‚ùå –û—à–∏–±–∫–∞:", error);
	});
